[gd_scene load_steps=12 format=3 uid="uid://bgaunxqb10tcd"]

[ext_resource type="Texture2D" uid="uid://wqqmv8s0ju0h" path="res://noises/perlin_tileable.png" id="1_i6wot"]
[ext_resource type="Texture2D" uid="uid://c7ufi1rc4rtvf" path="res://noises/voronoi_tileable.png" id="2_4riv2"]
[ext_resource type="Texture2D" uid="uid://dks1dgy7lwmjw" path="res://icon.svg" id="2_mokr7"]

[sub_resource type="Shader" id="Shader_x8tmu"]
code = "shader_type canvas_item;

uniform vec4 starcolor_range_start : source_color;
uniform vec4 starcolor_range_end : source_color;
uniform float star_density : hint_range(0.0, 10.0, 0.5);
uniform float star_size : hint_range(0.0, 20.0, 0.1);
uniform float star_size_prev = 0;
uniform float star_size_animation_speed : hint_range(0.0, 200.0, 1.0);
uniform float star_size_animation_start = -9999.0;

uniform sampler2D sky_noise_texture: repeat_enable, filter_linear;
uniform sampler2D star_noise_texture: repeat_enable, filter_linear;

vec2 positionInTexture(vec2 position, sampler2D tex) {
	vec2 size = vec2(textureSize(tex, 0));
	return mod(position, size) / size;
}

float currentStarSize() {
	float timeElapsed = TIME - star_size_animation_start;
	float progress = clamp((timeElapsed * star_size_animation_speed) / abs(star_size - star_size_prev), 0.0, 1.0);
	return mix(star_size_prev, star_size, progress);
}

float sampleStarBrightness(vec2 position) {
	float sample = texture(star_noise_texture, positionInTexture(position * star_density, star_noise_texture)).x;
	sample = 1.0 - sample;
	sample = max(pow(sample, 20.0 - currentStarSize()) * 2.0 - 1.0, 0.0);
	sample = sample > 0.7 ? sample : 0.0;
	return sample;
}

vec4 sampleStarColor(vec2 position) {
	float sample = texture(sky_noise_texture, positionInTexture(position * 1.0, sky_noise_texture)).x;
	return mix(starcolor_range_start, starcolor_range_end, sample);
}

float sampleSky(vec2 position) {
	return texture(sky_noise_texture, positionInTexture(position, sky_noise_texture)).x;
}

void fragment() {
	vec4 color = COLOR;
	vec2 position = FRAGCOORD.xy;
	float skyBrightness = sampleSky(position);
	color = vec4(color.rgb * skyBrightness, color.a);
	color = vec4(mix(color, sampleStarColor(position), sampleStarBrightness(position)).rgb, color.a);
	COLOR = color;
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_orpys"]
shader = SubResource("Shader_x8tmu")
shader_parameter/starcolor_range_start = Color(0.583892, 0.988264, 1, 1)
shader_parameter/starcolor_range_end = Color(0.999811, 0.902643, 0.755623, 1)
shader_parameter/star_density = 2.0
shader_parameter/star_size = 11.9
shader_parameter/star_size_prev = 0.0
shader_parameter/star_size_animation_speed = 197.0
shader_parameter/star_size_animation_start = 0.0
shader_parameter/sky_noise_texture = ExtResource("1_i6wot")
shader_parameter/star_noise_texture = ExtResource("2_4riv2")

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_vh0je"]
bg_color = Color(0, 0, 0, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_qa4vm"]
bg_color = Color(0.180005, 0.180005, 0.180005, 1)

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_qg2x0"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_igmvc"]

[sub_resource type="StyleBoxFlat" id="StyleBoxFlat_vmgwj"]

[sub_resource type="CSharpScript" id="CSharpScript_22slc"]
script/source = "using Godot;
using System;

public partial class LavaButton : Button {
    // Called when the node enters the scene tree for the first time.
    public override void _Ready() {
    }

    // Called every frame. 'delta' is the elapsed time since the previous frame.
    public override void _Process(double delta) {
        float shaderTime = (Time.GetTicksMsec() % 3600000ul) / 1000f;
        float starSize = Material.Get(\"shader_parameter/star_size\").AsSingle();
        if (shaderTime > 5f && starSize < 20f) {
            GD.Print($\"Groing from {starSize} to 20\");
            Material.Set(\"shader_parameter/star_size_prev\", starSize);
            Material.Set(\"shader_parameter/star_size\", 20f);
            Material.Set(\"shader_parameter/star_size_animation_start\", shaderTime);
        } else {
            GD.Print($\"{shaderTime}\");
        }
    }

    public override void _Pressed() {
        float shaderTime = (Time.GetTicksMsec() % 3600000ul) / 1000f;
        GD.Print($\"Groing from {Material.Get(\"shader_parameter/star_size\")} to 20\");
        Material.Set(\"shader_parameter/star_size_prev\", Material.Get(\"shader_parameter/star_size\"));
        Material.Set(\"shader_parameter/star_size\", 20f);
        Material.Set(\"shader_parameter/star_size_animation_start\", shaderTime);
    }
}"

[node name="LavaButton" type="Button"]
material = SubResource("ShaderMaterial_orpys")
offset_right = 276.0
offset_bottom = 41.0
theme_override_styles/normal = SubResource("StyleBoxFlat_vh0je")
theme_override_styles/hover = SubResource("StyleBoxFlat_qa4vm")
theme_override_styles/pressed = SubResource("StyleBoxFlat_qg2x0")
theme_override_styles/disabled = SubResource("StyleBoxFlat_igmvc")
theme_override_styles/focus = SubResource("StyleBoxFlat_vmgwj")
text = "Hello World"
icon = ExtResource("2_mokr7")
script = SubResource("CSharpScript_22slc")
